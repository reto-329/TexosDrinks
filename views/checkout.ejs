<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="<%= csrfToken %>">
    <title>Checkout - TexosDrinks</title>
    <link rel="stylesheet" href="/css/common.css">
    <link rel="stylesheet" href="/css/cart.css">
    <link rel="stylesheet" href="/css/header2.css">
    <link rel="stylesheet" href="/css/paystack-custom.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <link rel="icon" type="image/png" href="/Images/logo1.png" sizes="256x256">
    <script src="https://js.paystack.co/v1/inline.js"></script>
    <script src="/scripts/csrf-paystack.js"></script>
    <script src="/scripts/paystack-enhancer.js"></script>
    <script src="/scripts/payment-handler.js"></script>
    <style>
        .checkout-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }
        
        .checkout-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 2rem;
        }
        
        @media (max-width: 768px) {
            .checkout-grid {
                grid-template-columns: 1fr;
            }
        }
        
        .checkout-section {
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }
        
        .section-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            color: var(--dark);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .section-title i {
            color: var(--primary);
        }
        
        .address-card {
            border: 1px solid var(--border);
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
            position: relative;
        }
        
        .address-card.selected {
            border-color: var(--primary);
            background-color: rgba(var(--primary-rgb), 0.05);
        }
        
        .address-card .address-radio {
            position: absolute;
            top: 1rem;
            right: 1rem;
        }
        
        .address-name {
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        
        .address-details, .address-location, .address-phone {
            color: var(--gray);
            margin-bottom: 0.25rem;
            font-size: 0.9rem;
        }
        
        .add-address-link {
            display: inline-flex;
            align-items: center;
            color: var(--primary);
            font-weight: 500;
            text-decoration: none;
            margin-top: 1rem;
            gap: 0.5rem;
        }
        
        .order-summary {
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            padding: 1.5rem;
            position: sticky;
            top: 2rem;
        }
        
        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
            font-size: 0.95rem;
        }
        
        .summary-row.total {
            font-size: 1.2rem;
            font-weight: 600;
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid var(--border);
        }
        
        .item-row {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border);
        }
        
        .item-row:last-child {
            border-bottom: none;
        }
        
        .item-image {
            width: 60px;
            height: 60px;
            border-radius: 4px;
            overflow: hidden;
        }
        
        .item-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .item-details {
            flex: 1;
        }
        
        .item-name {
            font-weight: 500;
            margin-bottom: 0.25rem;
        }
        
        .item-meta {
            color: var(--gray);
            font-size: 0.85rem;
        }
        
        .item-price {
            font-weight: 500;
            text-align: right;
        }
        
        .payment-btn {
            display: block;
            width: 100%;
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 4px;
            padding: 1rem;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            margin-top: 1.5rem;
            transition: background 0.2s;
        }
        
        .payment-btn:hover {
            background: var(--primary-dark);
        }
        
        .payment-btn:disabled {
            background: var(--gray);
            cursor: not-allowed;
        }
        
        .payment-methods {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        
        .payment-method {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 1rem;
            border: 1px solid var(--border);
            border-radius: 8px;
            cursor: pointer;
        }
        
        .payment-method.selected {
            border-color: var(--primary);
            background-color: rgba(var(--primary-rgb), 0.05);
        }
        
        .payment-method-logo {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .payment-method-logo i {
            font-size: 1.5rem;
            color: var(--primary);
        }
        
        .payment-method-details {
            flex: 1;
        }
        
        .payment-method-name {
            font-weight: 500;
        }
        
        .payment-method-description {
            font-size: 0.85rem;
            color: var(--gray);
        }
    </style>
</head>
<body>
    <%- include('partials/headerSelector', { user: user || null }) %>
    
    <main class="checkout-page">
        <div class="checkout-container">
            <h1 class="page-title">Checkout</h1>
            
            <div class="checkout-grid">
                <div class="checkout-main">
                    <!-- Shipping Address Section -->
                    <section class="checkout-section">
                        <h2 class="section-title"><i class="fas fa-map-marker-alt"></i> Shipping Address</h2>
                        
                        <% if (addresses && addresses.length > 0) { %>
                            <div class="addresses-list">
                                <% addresses.forEach((address, index) => { %>
                                    <div class="address-card <%= address.is_default ? 'selected' : '' %>" data-address-id="<%= address.id %>">
                                        <input type="radio" name="shipping_address" id="address_<%= address.id %>" 
                                               class="address-radio" <%= address.is_default ? 'checked' : '' %>>
                                        <div class="address-name"><%= address.first_name %> <%= address.last_name %></div>
                                        <div class="address-details">
                                            <%= address.street %><% if (address.additional_info) { %>, <%= address.additional_info %><% } %>
                                        </div>
                                        <div class="address-location">
                                            <%= address.city %>, <%= address.state %>, <%= address.country %>
                                        </div>
                                        <div class="address-phone">+234 <%= address.phone %></div>
                                    </div>
                                <% }); %>
                            </div>
                        <% } else { %>
                            <p>No shipping addresses found.</p>
                        <% } %>
                        
                        <a href="/address-book" class="add-address-link">
                            <i class="fas fa-plus-circle"></i> Add New Address
                        </a>
                    </section>
                    
                    <!-- Payment Method Section -->
                    <section class="checkout-section">
                        <h2 class="section-title"><i class="fas fa-credit-card"></i> Payment Method</h2>
                        
                        <div class="payment-methods">
                            <div class="payment-method selected" data-payment="paystack">
                                <div class="payment-method-logo">
                                    <i class="fas fa-credit-card"></i>
                                </div>
                                <div class="payment-method-details">
                                    <div class="payment-method-name">Paystack</div>
                                    <div class="payment-method-description">Pay securely with your credit/debit card</div>
                                </div>
                                <input type="radio" name="payment_method" value="paystack" checked>
                            </div>
                        </div>
                    </section>
                    
                    <!-- Order Items Section -->
                    <section class="checkout-section">
                        <h2 class="section-title"><i class="fas fa-shopping-bag"></i> Order Items (<%= cart.items.length %>)</h2>
                        
                        <div class="order-items">
                            <% cart.items.forEach(item => { %>
                                <div class="item-row">
                                    <div class="item-image">
                                        <img src="<%= item.image_url || '/Images/product-placeholder.jpg' %>" alt="<%= item.name %>">
                                    </div>
                                    <div class="item-details">
                                        <div class="item-name"><%= item.name %></div>
                                        <div class="item-meta">
                                            <span>Qty: <%= item.quantity %></span>
                                        </div>
                                    </div>
                                    <div class="item-price">
                                        ₦<%= (item.price * item.quantity).toLocaleString() %>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    </section>
                </div>
                
                <!-- Order Summary Section -->
                <div class="order-summary">
                    <h2 class="section-title">Order Summary</h2>
                    
                    <div class="summary-row">
                        <span>Subtotal (<%= cart.items.reduce((acc, item) => acc + item.quantity, 0) %> items)</span>
                        <span>₦<%= cart.subtotal.toLocaleString() %></span>
                    </div>
                    
                    <div class="summary-row">
                        <span>Delivery Fee</span>
                        <span><%= cart.deliveryFee === 0 ? 'FREE' : `₦${cart.deliveryFee.toLocaleString()}` %></span>
                    </div>
                    
                    <div class="summary-row total">
                        <span>Total</span>
                        <span>₦<%= cart.total.toLocaleString() %></span>
                    </div>
                    
                    <button id="paymentButton" class="payment-btn">
                        <i class="fas fa-lock"></i> Pay ₦<%= cart.total.toLocaleString() %>
                    </button>
                    
                    <div style="margin-top: 1.5rem; text-align: center;">
                        <div style="font-size: 0.9rem; color: var(--gray); margin-bottom: 0.5rem;">
                            <i class="fas fa-shield-alt"></i> Secure Payment
                        </div>
                        <div class="payment-methods">
                            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5e/Visa_Inc._logo.svg/2560px-Visa_Inc._logo.svg.png" alt="Visa" class="payment-icon">
                            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Mastercard-logo.svg/1280px-Mastercard-logo.svg.png" alt="Mastercard" class="payment-icon">
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </main>
    
    <%- include('partials/footer') %>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Handle address selection
            const addressCards = document.querySelectorAll('.address-card');
            addressCards.forEach(card => {
                card.addEventListener('click', function() {
                    // Remove selected class from all cards
                    addressCards.forEach(c => c.classList.remove('selected'));
                    // Add selected class to clicked card
                    this.classList.add('selected');
                    // Check the radio button
                    this.querySelector('input[type="radio"]').checked = true;
                });
            });
            
            // Handle payment method selection
            const paymentMethods = document.querySelectorAll('.payment-method');
            paymentMethods.forEach(method => {
                method.addEventListener('click', function() {
                    // Remove selected class from all methods
                    paymentMethods.forEach(m => m.classList.remove('selected'));
                    // Add selected class to clicked method
                    this.classList.add('selected');
                    // Check the radio button
                    this.querySelector('input[type="radio"]').checked = true;
                });
            });
            
            // Handle payment button click
            const paymentButton = document.getElementById('paymentButton');
            paymentButton.addEventListener('click', async function() {
                // Disable button to prevent multiple clicks
                this.disabled = true;
                this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
                
                try {
                    // Get selected address
                    const selectedAddress = document.querySelector('.address-card.selected');
                    if (!selectedAddress) {
                        alert('Please select a shipping address');
                        this.disabled = false;
                        this.innerHTML = '<i class="fas fa-lock"></i> Pay ₦<%= cart.total.toLocaleString() %>';
                        return;
                    }
                    
                    const addressId = selectedAddress.dataset.addressId;
                    
                    // Create order first
                    const orderResponse = await fetch('/api/orders/checkout', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            addressId: addressId
                        })
                    });
                    
                    const orderData = await orderResponse.json();
                    
                    if (!orderResponse.ok) {
                        throw new Error(orderData.message || 'Failed to create order');
                    }
                    
                    try {
                        // Initialize Paystack payment
                        const paymentResponse = await fetch('/api/paystack/initialize', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                email: '<%= user.email %>',
                                amount: <%= cart.total %>,
                                orderId: orderData.id
                            })
                        });
                        
                        const paymentData = await paymentResponse.json();
                        
                        if (!paymentResponse.ok) {
                            throw new Error(paymentData.message || 'Failed to initialize payment');
                        }
                        
                        if (!paymentData.data || !paymentData.data.reference) {
                            throw new Error('Invalid payment data received from server');
                        }
                        
                        // Open Paystack payment modal with enhanced styling
                        const handler = PaystackPop.setup({
                            key: '<%= process.env.PAYSTACK_PUBLIC_KEY || "pk_test_placeholder" %>',
                            email: '<%= user.email %>',
                            amount: <%= cart.total * 100 %>, // Amount in kobo
                            ref: paymentData.data.reference,
                            currency: 'NGN',
                            label: '<%= user ? user.username : "Customer" %>',
                            metadata: {
                                custom_fields: [
                                    {
                                        display_name: "Order ID",
                                        variable_name: "order_id",
                                        value: orderData.id
                                    },
                                    {
                                        display_name: "Customer Name",
                                        variable_name: "customer_name",
                                        value: '<%= user ? user.username : "Customer" %>'
                                    }
                                ]
                            },
                            callback: function(response) {
                                // Use the payment handler to show loading and redirect
                                handlePaymentVerification(response.reference, orderData.id);
                            },
                            onClose: function() {
                                // Re-enable button
                                paymentButton.disabled = false;
                                paymentButton.innerHTML = '<i class="fas fa-lock"></i> Pay ₦<%= cart.total.toLocaleString() %>';
                            },
                            // Custom styling
                            customStyles: {
                                title: {
                                    fontSize: '1.5rem',
                                    fontWeight: 'bold'
                                },
                                container: {
                                    borderRadius: '10px'
                                },
                                button: {
                                    backgroundColor: '#dc2626'
                                }
                            }
                        });
                        
                        handler.openIframe();
                    } catch (paymentError) {
                        console.error('Payment initialization error:', paymentError);
                        alert('Payment initialization error: ' + paymentError.message);
                        
                        // Re-enable button
                        paymentButton.disabled = false;
                        paymentButton.innerHTML = '<i class="fas fa-lock"></i> Pay ₦<%= cart.total.toLocaleString() %>';
                    }
                } catch (error) {
                    console.error('Payment error:', error);
                    alert('Payment error: ' + error.message);
                    
                    // Re-enable button
                    this.disabled = false;
                    this.innerHTML = '<i class="fas fa-lock"></i> Pay ₦<%= cart.total.toLocaleString() %>';
                }
            });
        });
    </script>
</body>
</html>